concat():方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组

every:every 方法为数组中的每个元素执行一次 callback 函数，直到它找到一个使 callback 返回 false（表示可转换为布尔值 false 的值）的元素。如果发现了一个这样
的元素，every 方法将会立即返回 false。否则，callback 为每一个元素返回true，
every 就会返回 true。 every不会改变原数组

fill() 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。返回修改后的数组。只有谷歌火狐支持


filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。filter 不会改变原数组。

 find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。find方法不会改变数组。
 
 findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。findIndex 不会修改所调用的数组。
 
 forEach() 方法对数组的每个元素执行一次提供的函数。返回undefined.
 
 includes() 方法用来判断一个数组是否包含一个指定的值，如果是，酌情返回 true或 false。
 
 indexOf()方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1
 
 join() 方法将数组（或一个类数组对象）的所有元素连接到一个字符串中。不会改变数组！返回字符串
 
 
  keys() 方法返回一个新的Array迭代器，它包含数组中每个索引的键。
  
  lastIndexOf() 方法返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 fromIndex 处开始。
  
  map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。
  
  pop()方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。
  
  
  push() 方法将一个或多个元素添加到数组的末尾，并返回数组的新长度。
  
  reduce() 方法对累加器和数组中的每个元素 (从左到右)应用一个函数，将其减少为
  单个值。
  

 reverse() 方法将数组中元素的位置颠倒。第一个数组元素成为最后一个数组元
素，最后一个数组元素成为第一个。 改变原数组

slice() 方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象。原数组不会被修改

splice() 方法通过删除现有元素和/或添加新元素来更改一个数组的内容。返回值由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。

some() 方法测试数组中的某些元素是否通过由提供的函数实现的测试。 some 被调用时不会改变数组。


改变原数组的方法：
reverse(arr) 逆序
sort(arr) 排序
push(element)) 结尾追加
unshift(element) 头部追加 
arr.shift() 空参数，删除原来数组的第一元素，并返回删除以后的第一个元素
arr.pop() 同上，删除最后一个元素，并取出最后一个
arr.splice(index, howManty[, ele1[,.......eleN]]) 在索引位置为index的地方插入ele1......eleN，并删掉howMany个元素(替换功能)。如果没有ele就是删除操作；如果howMany = 0就是插入操作
fill


不改变原数组的方法：
arr.slice(begin[,end]) begin<=index<end 取数组的一部分，拷贝
arr.concat(value1,......valueN) 连接多个数组
arr.join([separator])用指定的字符或者默认为‘，’将数组里的元素连接起来
arr.map(callback[,thisArg]) 是forEach操作的具体化
some 
every
filter
find
findIndex
forEach
includes
indexOf
keys
lastIndexOf
reduce
some


对一个数组（每项都是数值）求和的方法有：
for forin forEach map reduce
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  