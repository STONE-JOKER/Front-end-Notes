参考文章： 
http://ghmagical.com/article/page/id/omIoPb1AIBPu
https://kongchenglc.coding.me/blog/js%E7%BB%A7%E6%89%BF20170503/#more

###原型类继承缺点： 
1存在引用缺陷，共享继承的引用类型属性，
2无法像父类构造函数传参数

###构造函数继承缺点：
Animal.apply() 更改函数作用域，return 回去Dog已经执行拥有了Animal的属性，但是没有Animal原型上的方法和属性，这样就无法实现代码复用，因为定义在父类原型上的共有方法无法继承


###组合继承其实就是将类式继承和构造函数继承组合在一起：

因为要把父类的原型上的方法给到子类，所以要类似下面
Dog.prototype = new Animal();


###寄生组合式继承就是在组合继承的基础上减少一次多余的调用父类的构造函数：通过
Dog.prototype = Object.create(Animal.prototype);
Dog.prototype.constructor = Dog; //由于对Animal的原型进行了拷贝后赋给Dog.prototype，因此Dog.prototype上的constructor属性也被重写了,所以这里修复一下
直接赋值给Dog.prototype而不用实例化一个对象

组合继承是直接new一个父类的实例给子类原型，而寄生是通过寄生于父类的实例，通过Object.create(父类对象或者原型),或Object(父类对象或者原型)




extends继承：Class和extends是在ES6中新增的，Class用来创建一个类，extends用来实现继承

###原型式继承
ECMAScript5新增了Object.create()方法规范化了原型式继承，这个方法接受两个参数： 	
一个作为新对象原型的对象（可以是对象或者null）
另一个为新对象定义额外属性的对象（可选，这个参数的格式和Object.defineProperties()方法的第二个参数格式相同，每个属性都是通过自己的描述符定义的）

var person = {                      //原型式继承规范化为create()函数
    name: "Nicholas",
    friends: ["Shelby","Court","Van"]
};
var anotherPerson = Object.create(person, {
    name: {
        value: "Greg"
    }
});
c(anotherPerson.name);    

缺点：引用类型的值得属性会共享相应的值。




function Animal(color){
  this.name = 'animal';
  this.type = ['pig','cat'];
}
Animal.prototype.greet = function(sound){console.log(sound);}
function Dog(){
   return new Animal();
}